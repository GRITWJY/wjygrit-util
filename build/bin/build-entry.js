let Components = require('../../components.json');
let fs = require('fs');
// 字符串模板库
var render = require('json-templater/string');
// 连字符形式的字符串转换为大驼峰形式
var uppercamelcase = require('uppercamelcase');
var path = require('path');
var endOfLine = require('os').EOL;

var OUTPUT_PATH = path.join(__dirname, '../../src/index.js');
// import语句模板, name就是大驼峰形, package连字符形式
var IMPORT_TEMPLATE = "import {{name}} from '../packages/{{package}}';";

var INSTALL_COMPONENT_TEMPLATE = '  {{name}}';
// 文件模板
var MAIN_TEMPLATE = `/* Automatically generated by './build/bin/build-entry.js' */

{{include}}

export default {
  version: '{{version}}',
{{list}}
};
`;
// 包名组成的数组
var ComponentNames = Object.keys(Components);

// import语句组成的数组
var includeComponentTemplate = [];
// export 导出的数组, 模板中的List
var listTemplate = [];

ComponentNames.forEach((name) => {
  // 将连字符形式的包名转换为大驼峰
  var componentName = uppercamelcase(name);
  // 替换掉name和package, 生成import语句
  includeComponentTemplate.push(
    render(IMPORT_TEMPLATE, {
      name: componentName,
      package: Components[name],
    }),
  );
  listTemplate.push(`  ${componentName}`);
});

var template = render(MAIN_TEMPLATE, {
  // import语句
  include: includeComponentTemplate.join(endOfLine),
  // 版本号
  version: process.env.VERSION || require('../../package.json').version,
  // 导出列表
  list: listTemplate.join(',' + endOfLine),
});
// 写文件
fs.writeFileSync(OUTPUT_PATH, template);
console.log('[build entry] DONE:', OUTPUT_PATH);
